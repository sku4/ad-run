name: ad

on:
  workflow_call:

env:
  run_git_url: https://github.com/sku4/ad-run.git
  registry: registry.digitalocean.com/sku4
  repository: repository
  image_tnt_storage: ad/tnt/storage
  image_tnt_replica: ad/tnt/replica
  image_parser: ad/parser
  image_notifier: ad/notifier
  image_api: ad/api
  image_prometheus: ad/prometheus
  image_grafana: ad/grafana
  sha: $(echo $GITHUB_SHA | head -c7)
  
jobs:
  parser-check:
    uses: sku4/ad-run/.github/workflows/go-check.yml@master
    with:
      repository: sku4/ad-parser

  notifier-check:
    uses: sku4/ad-run/.github/workflows/go-check.yml@master
    with:
      repository: sku4/ad-notifier

  api-check:
    uses: sku4/ad-run/.github/workflows/go-check.yml@master
    with:
      repository: sku4/ad-api

  cd-build:
    runs-on: ubuntu-latest
    needs: [parser-check, notifier-check, api-check]

    steps:
      - name: Checkout master
        uses: actions/checkout@v3
        with:
          repository: sku4/ad-run

      - name: Build containers image
        run: docker compose build --no-cache

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Push image to DigitalOcean Container Registry
        run: |
          docker images
          docker image tag ${{ env.image_tnt_storage }}:latest ${{ env.registry }}/${{ env.repository }}:storage-${{ env.sha }}
          docker image tag ${{ env.image_tnt_replica }}:latest ${{ env.registry }}/${{ env.repository }}:replica-${{ env.sha }}
          docker image tag ${{ env.image_parser }}:latest ${{ env.registry }}/${{ env.repository }}:parser-${{ env.sha }}
          docker image tag ${{ env.image_notifier }}:latest ${{ env.registry }}/${{ env.repository }}:notifier-${{ env.sha }}
          docker image tag ${{ env.image_api }}:latest ${{ env.registry }}/${{ env.repository }}:api-${{ env.sha }}
          docker image tag ${{ env.image_prometheus }}:latest ${{ env.registry }}/${{ env.repository }}:prometheus-${{ env.sha }}
          docker image tag ${{ env.image_grafana }}:latest ${{ env.registry }}/${{ env.repository }}:grafana-${{ env.sha }}
          docker image push ${{ env.registry }}/${{ env.repository }}:storage-${{ env.sha }}
          docker image push ${{ env.registry }}/${{ env.repository }}:replica-${{ env.sha }}
          docker image push ${{ env.registry }}/${{ env.repository }}:parser-${{ env.sha }}
          docker image push ${{ env.registry }}/${{ env.repository }}:notifier-${{ env.sha }}
          docker image push ${{ env.registry }}/${{ env.repository }}:api-${{ env.sha }}
          docker image push ${{ env.registry }}/${{ env.repository }}:prometheus-${{ env.sha }}
          docker image push ${{ env.registry }}/${{ env.repository }}:grafana-${{ env.sha }}

  cd-deploy:
    runs-on: ubuntu-latest
    needs: cd-build

    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          envs:
            GITHUB_SHA
          script: |
            # Login into Digital Ocean Registry
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} ${{ env.registry }}

            # Pull containers
            docker pull ${{ env.registry }}/${{ env.repository }}:storage-${{ env.sha }}
            docker pull ${{ env.registry }}/${{ env.repository }}:replica-${{ env.sha }}
            docker pull ${{ env.registry }}/${{ env.repository }}:parser-${{ env.sha }}
            docker pull ${{ env.registry }}/${{ env.repository }}:notifier-${{ env.sha }}
            docker pull ${{ env.registry }}/${{ env.repository }}:api-${{ env.sha }}
            docker pull ${{ env.registry }}/${{ env.repository }}:prometheus-${{ env.sha }}
            docker pull ${{ env.registry }}/${{ env.repository }}:grafana-${{ env.sha }}
            
            # Stop running containers
            cd /tmp/ad
            docker compose down --remove-orphans
            
            # Download composer
            rm -rf /tmp/ad
            cd /tmp
            git clone ${{ env.run_git_url }} ad
            cd /tmp/ad
            
            # Rename containers
            docker image tag ${{ env.registry }}/${{ env.repository }}:storage-${{ env.sha }} ${{ env.image_tnt_storage }}:latest 
            docker image tag ${{ env.registry }}/${{ env.repository }}:replica-${{ env.sha }} ${{ env.image_tnt_replica }}:latest
            docker image tag ${{ env.registry }}/${{ env.repository }}:parser-${{ env.sha }} ${{ env.image_parser }}:latest
            docker image tag ${{ env.registry }}/${{ env.repository }}:notifier-${{ env.sha }} ${{ env.image_notifier }}:latest
            docker image tag ${{ env.registry }}/${{ env.repository }}:api-${{ env.sha }} ${{ env.image_api }}:latest
            docker image tag ${{ env.registry }}/${{ env.repository }}:prometheus-${{ env.sha }} ${{ env.image_prometheus }}:latest
            docker image tag ${{ env.registry }}/${{ env.repository }}:grafana-${{ env.sha }} ${{ env.image_grafana }}:latest

            # Set env variables
            export HOST_URL=${{ secrets.ENV_HOST_URL }}
            export TELEGRAM_BOT_TOKEN=${{ secrets.ENV_TELEGRAM_BOT_TOKEN }}
            export TELEGRAM_FEEDBACK_CHAT_ID=${{ secrets.ENV_TELEGRAM_FEEDBACK_CHAT_ID }}
            export GF_SERVER_DOMAIN=${{ secrets.GF_SERVER_DOMAIN }}

            # Run docker compose
            docker compose up -d
            
            # Clean unused images
            docker image prune -af
